cmake_minimum_required(VERSION 3.24)

project(desktop_live_whisper LANGUAGES CXX)

set(CMAKE_CXX_STANDARD 20)
set(CMAKE_CXX_STANDARD_REQUIRED ON)

# Default to console-only build; UI can be enabled explicitly later
option(BUILD_APP "Build the GUI application with Dear ImGui" OFF)

# Disable tests by default; enable when you want them
set(BUILD_TESTING OFF CACHE BOOL "Enable CTest and test targets")
include(CTest)

if(BUILD_APP)
    # Dear ImGui library (MIT licensed, commercial-friendly!)
    add_library(imgui STATIC
        third_party/imgui/imgui.cpp
        third_party/imgui/imgui_draw.cpp
        third_party/imgui/imgui_tables.cpp
        third_party/imgui/imgui_widgets.cpp
        third_party/imgui/imgui_demo.cpp
    )
    target_include_directories(imgui PUBLIC third_party/imgui)

    # Platform-specific backends
    if(WIN32)
        target_sources(imgui PRIVATE
            third_party/imgui/backends/imgui_impl_win32.cpp
            third_party/imgui/backends/imgui_impl_dx11.cpp
        )
        target_include_directories(imgui PUBLIC third_party/imgui/backends)
        target_link_libraries(imgui PUBLIC d3d11 dxgi d3dcompiler)
    endif()

    if(APPLE)
        target_sources(imgui PRIVATE
            third_party/imgui/backends/imgui_impl_osx.mm
            third_party/imgui/backends/imgui_impl_metal.mm
        )
        target_include_directories(imgui PUBLIC third_party/imgui/backends)
        target_link_libraries(imgui PUBLIC 
            "-framework Metal" 
            "-framework MetalKit" 
            "-framework Cocoa"
            "-framework QuartzCore"
        )
    endif()

    # Core library (no Qt dependency)
    add_library(core_lib
        src/core/logging.cpp
        src/core/config.cpp
        src/core/transcription_controller.cpp
    )
    target_include_directories(core_lib PUBLIC src)
    # Note: Will link to asr_whisper, diarization, audio_windows after they're all defined
    # For now, manually add include paths that would come from linking:
    target_include_directories(core_lib PRIVATE 
        ${CMAKE_SOURCE_DIR}/third_party/whisper.cpp
        ${CMAKE_SOURCE_DIR}/third_party/onnxruntime/include
    )

    # Audio library (Windows WASAPI + Device Abstraction)
    add_library(audio_windows STATIC
        src/audio/windows_wasapi.cpp
        src/audio/windows_wasapi_out.cpp
        src/audio/file_capture.cpp
        src/audio/drwav_resample.cpp
        src/audio/audio_input_device.cpp
        src/audio/audio_input_device_synthetic.cpp
    )
    
    if(WIN32)
        target_sources(audio_windows PRIVATE
            src/audio/win/audio_input_device_windows.cpp
        )
        # Link Windows-specific libraries for WASAPI
        target_link_libraries(audio_windows PRIVATE ole32 uuid)
    endif()
    
    target_include_directories(audio_windows PUBLIC src)
    # Note: audio_windows is a low-level library with no dependencies on core_lib

    # ASR library (Whisper backend)
    add_library(asr_whisper STATIC
        src/asr/whisper_backend.cpp
    )
    target_include_directories(asr_whisper PUBLIC src)
    target_link_libraries(asr_whisper PUBLIC core_lib)

    # GUI application with ImGui - Platform-specific entry points
    if(WIN32)
        add_executable(app_desktop_whisper WIN32
            src/ui/main_windows.cpp
            src/ui/app_window.cpp
        )
        target_link_libraries(app_desktop_whisper PRIVATE
            imgui
            core_lib
            ole32 
            uuid 
            Shcore
            # TODO: Re-enable once controller is fully implemented
            # audio_windows
            # asr_whisper
            # app_controller
        )
    elseif(APPLE)
        add_executable(app_desktop_whisper MACOSX_BUNDLE
            src/ui/main_macos.mm
            src/ui/app_window.cpp
        )
        target_link_libraries(app_desktop_whisper PRIVATE
            imgui
            core_lib
            "-framework Cocoa"
            "-framework Metal"
            "-framework MetalKit"
            "-framework QuartzCore"
            # TODO: Re-enable once controller is fully implemented
            # audio_macos (to be created)
            # asr_whisper
            # app_controller
        )
        set_target_properties(app_desktop_whisper PROPERTIES
            MACOSX_BUNDLE_BUNDLE_NAME "Desktop Live Whisper"
            MACOSX_BUNDLE_GUI_IDENTIFIER "com.vam.desktoplivewhisper"
            MACOSX_BUNDLE_SHORT_VERSION_STRING "1.0"
        )
    endif()

    install(TARGETS app_desktop_whisper)
    
    # Test: Audio device abstraction
    add_executable(test_audio_device
        apps/test_audio_device.cpp
    )
    target_link_libraries(test_audio_device PRIVATE
        audio_windows
    )
    
    # Test: TranscriptionController with audio device integration
    add_executable(test_transcription_controller
        apps/test_transcription_controller.cpp
    )
    target_compile_features(test_transcription_controller PRIVATE cxx_std_20)
    target_include_directories(test_transcription_controller PRIVATE src)
    # Link immediately - CMake will resolve asr_whisper/diarization when they're defined later
    target_link_libraries(test_transcription_controller PRIVATE core_lib asr_whisper audio_windows diarization)
    
    # Note: Link core_lib dependencies after diarization is defined (later in file)
endif()

# Console app path when not building Qt app
if(NOT BUILD_APP)
    # asr_whisper without Qt; optional whisper.cpp via third_party
    add_library(asr_whisper STATIC
        src/asr/whisper_backend.cpp
    )
    target_include_directories(asr_whisper PUBLIC src)
    # Try vcpkg-provided whisper-cpp first
    find_package(whisper-cpp CONFIG QUIET)
    if (whisper-cpp_FOUND)
        target_link_libraries(asr_whisper PUBLIC whisper-cpp::whisper-cpp)
        target_compile_definitions(asr_whisper PUBLIC WHISPER_BACKEND_AVAILABLE=1)
        message(STATUS "Using whisper-cpp from vcpkg")
    elseif (EXISTS "${CMAKE_SOURCE_DIR}/third_party/whisper.cpp/CMakeLists.txt")
        # Build third_party whisper and ggml as static to avoid runtime DLL issues
        set(BUILD_SHARED_LIBS OFF CACHE BOOL "Build static libs" FORCE)
        
        # Enable OpenBLAS if available locally
        if (EXISTS "${CMAKE_SOURCE_DIR}/third_party/openblas/bin/libopenblas.dll")
            set(GGML_BLAS ON CACHE BOOL "Enable BLAS" FORCE)
            set(BLA_VENDOR "OpenBLAS" CACHE STRING "BLAS vendor" FORCE)
            set(GGML_BLAS_VENDOR "OpenBLAS" CACHE STRING "GGML BLAS vendor" FORCE)
            # Use import library for DLL (.lib for MSVC, or .dll.a for MinGW)
            if (EXISTS "${CMAKE_SOURCE_DIR}/third_party/openblas/libopenblas.lib")
                set(BLAS_LIBRARIES "${CMAKE_SOURCE_DIR}/third_party/openblas/libopenblas.lib" CACHE FILEPATH "BLAS library" FORCE)
            else()
                set(BLAS_LIBRARIES "${CMAKE_SOURCE_DIR}/third_party/openblas/lib/libopenblas.dll.a" CACHE FILEPATH "BLAS library" FORCE)
            endif()
            set(BLAS_INCLUDE_DIRS "${CMAKE_SOURCE_DIR}/third_party/openblas/include" CACHE PATH "BLAS include dir" FORCE)
            message(STATUS "Enabling BLAS with local OpenBLAS DLL at ${CMAKE_SOURCE_DIR}/third_party/openblas")
        endif()
        
        add_subdirectory(third_party/whisper.cpp EXCLUDE_FROM_ALL)
        target_link_libraries(asr_whisper PUBLIC whisper)
        target_compile_definitions(asr_whisper PUBLIC WHISPER_BACKEND_AVAILABLE=1)
        target_include_directories(asr_whisper PUBLIC third_party/whisper.cpp)
        message(STATUS "Using third_party/whisper.cpp")
    else()
        message(FATAL_ERROR "Whisper backend required but not found. Either install whisper-cpp via vcpkg or add the vendored submodule: git submodule add https://github.com/ggml-org/whisper.cpp third_party/whisper.cpp && git submodule update --init --recursive")
    endif()

    # NOTE: audio_windows library is defined earlier (line ~65) with full device abstraction
    # This old minimal definition has been removed to avoid duplication

    # Speaker diarization library
    add_library(diarization STATIC
        src/diar/speaker_cluster.cpp
        src/diar/onnx_embedder.cpp
        src/diar/mel_features.cpp
    )
    target_include_directories(diarization PUBLIC src)
    
    # Link ONNX Runtime (using prebuilt binaries from third_party)
    set(ONNXRUNTIME_ROOT "${CMAKE_SOURCE_DIR}/third_party/onnxruntime")
    if (EXISTS "${ONNXRUNTIME_ROOT}/include")
        target_include_directories(diarization PRIVATE "${ONNXRUNTIME_ROOT}/include")
        target_link_libraries(diarization PUBLIC "${ONNXRUNTIME_ROOT}/lib/onnxruntime.lib")
        target_compile_definitions(diarization PUBLIC ONNX_AVAILABLE=1)
        message(STATUS "Using ONNX Runtime from ${ONNXRUNTIME_ROOT}")
        
        # Copy ONNX Runtime DLLs to output directory
        add_custom_command(TARGET diarization POST_BUILD
            COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${ONNXRUNTIME_ROOT}/lib/onnxruntime.dll"
                "$<TARGET_FILE_DIR:diarization>"
            COMMAND ${CMAKE_COMMAND} -E copy_if_different
                "${ONNXRUNTIME_ROOT}/lib/onnxruntime_providers_shared.dll"
                "$<TARGET_FILE_DIR:diarization>"
        )
        
        # Copy OpenBLAS DLL if available (needed by whisper.cpp)
        if (EXISTS "${CMAKE_SOURCE_DIR}/third_party/openblas/bin/libopenblas.dll")
            add_custom_command(TARGET diarization POST_BUILD
                COMMAND ${CMAKE_COMMAND} -E copy_if_different
                    "${CMAKE_SOURCE_DIR}/third_party/openblas/bin/libopenblas.dll"
                    "$<TARGET_FILE_DIR:diarization>"
            )
        endif()
    else()
        message(FATAL_ERROR "ONNX Runtime not found. Run: ./scripts/download_onnxruntime.ps1")
    endif()

    # Link core_lib with its dependencies (if BUILD_APP was enabled earlier)
    if(TARGET core_lib)
        target_link_libraries(core_lib PUBLIC asr_whisper diarization audio_windows)
    endif()
    
    # Link test_transcription_controller if it was created in BUILD_APP section
    if(TARGET test_transcription_controller)
        # Same as test_transcribe but with core_lib added
        target_link_libraries(test_transcription_controller PRIVATE core_lib asr_whisper audio_windows diarization)
    endif()

    # Test: Streaming transcription (simulates microphone with file input)
    add_executable(test_transcribe
        src/console/transcribe_file.cpp
        src/audio/file_capture.cpp
    )
    # Safeguard: ensure this TU is compiled as C++
    set_source_files_properties(src/console/transcribe_file.cpp PROPERTIES LANGUAGE CXX)
    target_compile_features(test_transcribe PRIVATE cxx_std_20)
    target_include_directories(test_transcribe PRIVATE src)
    target_link_libraries(test_transcribe PRIVATE asr_whisper audio_windows diarization)

    # Test application for word-level timestamps
    add_executable(test_word_timestamps
        apps/test_word_timestamps.cpp
        src/audio/file_capture.cpp
    )
    target_compile_features(test_word_timestamps PRIVATE cxx_std_20)
    target_include_directories(test_word_timestamps PRIVATE src)
    target_link_libraries(test_word_timestamps PRIVATE asr_whisper audio_windows)

    # Test application for word-level speaker mapping (Phase 3 Step 2)
    add_executable(test_word_speaker_mapping
        apps/test_word_speaker_mapping.cpp
        src/audio/file_capture.cpp
    )
    target_compile_features(test_word_speaker_mapping PRIVATE cxx_std_20)
    target_include_directories(test_word_speaker_mapping PRIVATE src)
    target_link_libraries(test_word_speaker_mapping PRIVATE asr_whisper audio_windows diarization)

    # Diagnostic tool for embedding quality analysis
    add_executable(test_embedding_quality
        apps/test_embedding_quality.cpp
        src/audio/file_capture.cpp
    )
    target_compile_features(test_embedding_quality PRIVATE cxx_std_20)
    target_include_directories(test_embedding_quality PRIVATE src)
    target_link_libraries(test_embedding_quality PRIVATE audio_windows diarization)
    
    # Word-level clustering test (the RIGHT approach!)
    add_executable(test_word_clustering
        apps/test_word_clustering.cpp
        src/audio/file_capture.cpp
    )
    target_compile_features(test_word_clustering PRIVATE cxx_std_20)
    target_include_directories(test_word_clustering PRIVATE src)
    target_link_libraries(test_word_clustering PRIVATE audio_windows asr_whisper diarization)
    
    # Word-level clustering V2 (clean sequential)
    add_executable(test_word_clustering_v2
        apps/test_word_clustering_v2.cpp
        src/audio/file_capture.cpp
    )
    target_compile_features(test_word_clustering_v2 PRIVATE cxx_std_20)
    target_include_directories(test_word_clustering_v2 PRIVATE src)
    target_link_libraries(test_word_clustering_v2 PRIVATE audio_windows asr_whisper diarization)
    
    # Boundary detection approach
    add_executable(test_boundary_detection
        apps/test_boundary_detection.cpp
        src/audio/file_capture.cpp
    )
    target_compile_features(test_boundary_detection PRIVATE cxx_std_20)
    target_include_directories(test_boundary_detection PRIVATE src)
    target_link_libraries(test_boundary_detection PRIVATE audio_windows asr_whisper diarization)
    
    # Segment-level speaker assignment (BEST approach!)
    add_executable(test_segment_speakers
        apps/test_segment_speakers.cpp
        src/audio/file_capture.cpp
    )
    target_compile_features(test_segment_speakers PRIVATE cxx_std_20)
    target_include_directories(test_segment_speakers PRIVATE src)
    target_link_libraries(test_segment_speakers PRIVATE audio_windows asr_whisper diarization)
    
    # Frame-level voting within segments
    add_executable(test_frame_voting
        apps/test_frame_voting.cpp
        src/audio/file_capture.cpp
    )
    target_compile_features(test_frame_voting PRIVATE cxx_std_20)
    target_include_directories(test_frame_voting PRIVATE src)
    target_link_libraries(test_frame_voting PRIVATE audio_windows asr_whisper diarization)
    
    # Application API - TranscriptionController library
    add_library(app_controller STATIC
        src/app/transcription_controller.cpp
    )
    target_compile_features(app_controller PUBLIC cxx_std_20)
    target_include_directories(app_controller PUBLIC src)
    target_link_libraries(app_controller PUBLIC audio_windows asr_whisper diarization)
    
    # Test application for TranscriptionController API
    add_executable(test_controller_api
        apps/test_controller_api.cpp
    )
    target_compile_features(test_controller_api PRIVATE cxx_std_20)
    target_include_directories(test_controller_api PRIVATE src)
    target_link_libraries(test_controller_api PRIVATE app_controller)
endif()


# Tests can be enabled by setting -DBUILD_TESTING=ON; no test targets by default
